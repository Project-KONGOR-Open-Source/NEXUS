// <auto-generated />
using System;
using MERRICK.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MERRICK.Database.Migrations
{
    [DbContext(typeof(MerrickContext))]
    partial class MerrickContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MERRICK.Database.Entities.Core.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AscensionLevel")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("AutoConnectChatChannels")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClanID")
                        .HasColumnType("int");

                    b.Property<int>("ClanTier")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("IPAddressCollection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.PrimitiveCollection<string>("MACAddressCollection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.PrimitiveCollection<string>("SelectedStoreItems")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("SystemInformationCollection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("SystemInformationHashCollection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("TimestampCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("TimestampJoinedClan")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimestampLastActive")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ClanID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Core.Clan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<DateTimeOffset>("TimestampCreated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("Name", "Tag")
                        .IsUnique();

                    b.ToTable("Clans");
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Core.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("GoldCoins")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("OwnedStoreItems")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PBKDF2PasswordHash")
                        .IsRequired()
                        .HasMaxLength(84)
                        .HasColumnType("nvarchar(84)");

                    b.Property<int>("PlinkoTickets")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("SRPPasswordHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("SRPPasswordSalt")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("SilverCoins")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TimestampCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimestampLastActive")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TotalExperience")
                        .HasColumnType("int");

                    b.Property<int>("TotalLevel")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Game.HeroGuide", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AbilityQueue")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)");

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("CoreItems")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("DownVotes")
                        .HasColumnType("int");

                    b.Property<string>("EarlyGameItems")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit");

                    b.Property<string>("HeroIdentifier")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("HeroName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Intro")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LuxuryItems")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Public")
                        .HasColumnType("bit");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("StartingItems")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTimeOffset>("TimestampCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("TimestampLastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpVotes")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AuthorID");

                    b.ToTable("HeroGuides");
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Statistics.MatchStatistics", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AveragePSR")
                        .HasColumnType("int");

                    b.Property<int>("AveragePSRTeamOne")
                        .HasColumnType("int");

                    b.Property<int>("AveragePSRTeamTwo")
                        .HasColumnType("int");

                    b.Property<int>("AwardHighestCreepScore")
                        .HasColumnType("int");

                    b.Property<int>("AwardLargestKillStreak")
                        .HasColumnType("int");

                    b.Property<int>("AwardLeastDeaths")
                        .HasColumnType("int");

                    b.Property<int>("AwardMostAnnihilations")
                        .HasColumnType("int");

                    b.Property<int>("AwardMostAssists")
                        .HasColumnType("int");

                    b.Property<int>("AwardMostBuildingDamage")
                        .HasColumnType("int");

                    b.Property<int>("AwardMostHeroDamageDealt")
                        .HasColumnType("int");

                    b.Property<int>("AwardMostKills")
                        .HasColumnType("int");

                    b.Property<int>("AwardMostQuadKills")
                        .HasColumnType("int");

                    b.Property<int>("AwardMostSmackdowns")
                        .HasColumnType("int");

                    b.Property<int>("AwardMostWardsKilled")
                        .HasColumnType("int");

                    b.Property<string>("BannedHeroes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConnectionState")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<string>("GameMode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HostAccountName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapVersion")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("MatchID")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRounds")
                        .HasColumnType("int");

                    b.Property<int>("PlayerScoreGoal")
                        .HasColumnType("int");

                    b.Property<string>("ReleaseStage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScoreTeam1")
                        .HasColumnType("int");

                    b.Property<int>("ScoreTeam2")
                        .HasColumnType("int");

                    b.Property<long>("ServerID")
                        .HasColumnType("bigint");

                    b.Property<string>("SubmissionDebug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamScoreGoal")
                        .HasColumnType("int");

                    b.Property<int>("TimePlayed")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MatchID")
                        .IsUnique();

                    b.ToTable("MatchStatistics");
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Statistics.PlayerStatistics", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<int>("Annihilation")
                        .HasColumnType("int");

                    b.Property<int>("Benefit")
                        .HasColumnType("int");

                    b.Property<int>("Bloodlust")
                        .HasColumnType("int");

                    b.Property<int>("BuildingDamage")
                        .HasColumnType("int");

                    b.Property<int>("BuildingsRazed")
                        .HasColumnType("int");

                    b.Property<int>("Buybacks")
                        .HasColumnType("int");

                    b.Property<int?>("ClanID")
                        .HasColumnType("int");

                    b.Property<string>("ClanTag")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("ConcedeVotes")
                        .HasColumnType("int");

                    b.Property<int>("Conceded")
                        .HasColumnType("int");

                    b.Property<int>("ConsumablesUsed")
                        .HasColumnType("int");

                    b.Property<int>("Denies")
                        .HasColumnType("int");

                    b.Property<int>("Disconnected")
                        .HasColumnType("int");

                    b.Property<int>("DoubleKill")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceDenied")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceFromBuildings")
                        .HasColumnType("int");

                    b.Property<double>("GameplayStat0")
                        .HasColumnType("float");

                    b.Property<double>("GameplayStat1")
                        .HasColumnType("float");

                    b.Property<double>("GameplayStat2")
                        .HasColumnType("float");

                    b.Property<double>("GameplayStat3")
                        .HasColumnType("float");

                    b.Property<double>("GameplayStat4")
                        .HasColumnType("float");

                    b.Property<double>("GameplayStat5")
                        .HasColumnType("float");

                    b.Property<double>("GameplayStat6")
                        .HasColumnType("float");

                    b.Property<double>("GameplayStat7")
                        .HasColumnType("float");

                    b.Property<double>("GameplayStat8")
                        .HasColumnType("float");

                    b.Property<double>("GameplayStat9")
                        .HasColumnType("float");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<int>("GoldFromBuildings")
                        .HasColumnType("int");

                    b.Property<int>("GoldFromHeroKills")
                        .HasColumnType("int");

                    b.Property<int>("GoldLostToDeath")
                        .HasColumnType("int");

                    b.Property<int>("GoldSpent")
                        .HasColumnType("int");

                    b.Property<int>("GroupNumber")
                        .HasColumnType("int");

                    b.Property<int>("HeroAssists")
                        .HasColumnType("int");

                    b.Property<int>("HeroDamage")
                        .HasColumnType("int");

                    b.Property<int>("HeroDeaths")
                        .HasColumnType("int");

                    b.Property<int>("HeroExperience")
                        .HasColumnType("int");

                    b.Property<long>("HeroID")
                        .HasColumnType("bigint");

                    b.Property<int>("HeroKills")
                        .HasColumnType("int");

                    b.Property<int>("HeroLevel")
                        .HasColumnType("int");

                    b.Property<int>("Humiliation")
                        .HasColumnType("int");

                    b.Property<string>("Inventory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kicked")
                        .HasColumnType("int");

                    b.Property<int>("KillStreak10")
                        .HasColumnType("int");

                    b.Property<int>("KillStreak15")
                        .HasColumnType("int");

                    b.Property<int>("KillStreak3")
                        .HasColumnType("int");

                    b.Property<int>("KillStreak4")
                        .HasColumnType("int");

                    b.Property<int>("KillStreak5")
                        .HasColumnType("int");

                    b.Property<int>("KillStreak6")
                        .HasColumnType("int");

                    b.Property<int>("KillStreak7")
                        .HasColumnType("int");

                    b.Property<int>("KillStreak8")
                        .HasColumnType("int");

                    b.Property<int>("KillStreak9")
                        .HasColumnType("int");

                    b.Property<int>("LobbyPosition")
                        .HasColumnType("int");

                    b.Property<int>("Loss")
                        .HasColumnType("int");

                    b.Property<int>("MatchID")
                        .HasColumnType("int");

                    b.Property<int>("Nemesis")
                        .HasColumnType("int");

                    b.Property<int>("NeutralCreepDamage")
                        .HasColumnType("int");

                    b.Property<int>("NeutralCreepExperience")
                        .HasColumnType("int");

                    b.Property<int>("NeutralCreepGold")
                        .HasColumnType("int");

                    b.Property<int>("NeutralCreepKills")
                        .HasColumnType("int");

                    b.Property<int>("PublicMatch")
                        .HasColumnType("int");

                    b.Property<double>("PublicSkillRatingChange")
                        .HasColumnType("float");

                    b.Property<int>("QuadKill")
                        .HasColumnType("int");

                    b.Property<int>("Retribution")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SecondsDead")
                        .HasColumnType("int");

                    b.Property<int>("SecondsPlayed")
                        .HasColumnType("int");

                    b.Property<int>("Smackdown")
                        .HasColumnType("int");

                    b.Property<int>("SocialBonus")
                        .HasColumnType("int");

                    b.Property<int>("SoloRankedMatch")
                        .HasColumnType("int");

                    b.Property<double>("SoloRankedSkillRatingChange")
                        .HasColumnType("float");

                    b.Property<int>("Team")
                        .HasColumnType("int");

                    b.Property<int>("TeamCreepDamage")
                        .HasColumnType("int");

                    b.Property<int>("TeamCreepExperience")
                        .HasColumnType("int");

                    b.Property<int>("TeamCreepGold")
                        .HasColumnType("int");

                    b.Property<int>("TeamCreepKills")
                        .HasColumnType("int");

                    b.Property<int>("TeamRankedMatch")
                        .HasColumnType("int");

                    b.Property<double>("TeamRankedSkillRatingChange")
                        .HasColumnType("float");

                    b.Property<int>("TimeEarningExperience")
                        .HasColumnType("int");

                    b.Property<int>("TripleKill")
                        .HasColumnType("int");

                    b.Property<int>("UsedToken")
                        .HasColumnType("int");

                    b.Property<int>("WardsPlaced")
                        .HasColumnType("int");

                    b.Property<int>("Win")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MatchID", "AccountID")
                        .IsUnique();

                    b.ToTable("PlayerStatistics");
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Utility.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "ADMINISTRATOR"
                        },
                        new
                        {
                            ID = 2,
                            Name = "USER"
                        });
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Utility.Token", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Purpose")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TimestampConsumed")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimestampCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Value")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Core.Account", b =>
                {
                    b.HasOne("MERRICK.Database.Entities.Core.Clan", "Clan")
                        .WithMany("Members")
                        .HasForeignKey("ClanID");

                    b.HasOne("MERRICK.Database.Entities.Core.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("MERRICK.Database.Entities.Relational.BannedPeer", "BannedPeers", b1 =>
                        {
                            b1.Property<int>("AccountID")
                                .HasColumnType("int");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("BanReason")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.HasKey("AccountID", "__synthesizedOrdinal");

                            b1.HasIndex("Name")
                                .IsUnique();

                            b1.ToTable("Accounts");

                            b1.ToJson("BannedPeers");

                            b1.WithOwner()
                                .HasForeignKey("AccountID");
                        });

                    b.OwnsMany("MERRICK.Database.Entities.Relational.FriendedPeer", "FriendedPeers", b1 =>
                        {
                            b1.Property<int>("AccountID")
                                .HasColumnType("int");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("ClanTag")
                                .HasMaxLength(4)
                                .HasColumnType("nvarchar(4)");

                            b1.Property<string>("FriendGroup")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.HasKey("AccountID", "__synthesizedOrdinal");

                            b1.HasIndex("Name")
                                .IsUnique();

                            b1.ToTable("Accounts");

                            b1.ToJson("FriendedPeers");

                            b1.WithOwner()
                                .HasForeignKey("AccountID");
                        });

                    b.OwnsMany("MERRICK.Database.Entities.Relational.IgnoredPeer", "IgnoredPeers", b1 =>
                        {
                            b1.Property<int>("AccountID")
                                .HasColumnType("int");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.HasKey("AccountID", "__synthesizedOrdinal");

                            b1.HasIndex("Name")
                                .IsUnique();

                            b1.ToTable("Accounts");

                            b1.ToJson("IgnoredPeers");

                            b1.WithOwner()
                                .HasForeignKey("AccountID");
                        });

                    b.Navigation("BannedPeers");

                    b.Navigation("Clan");

                    b.Navigation("FriendedPeers");

                    b.Navigation("IgnoredPeers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Core.User", b =>
                {
                    b.HasOne("MERRICK.Database.Entities.Utility.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Game.HeroGuide", b =>
                {
                    b.HasOne("MERRICK.Database.Entities.Core.Account", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Core.Clan", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Core.User", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
