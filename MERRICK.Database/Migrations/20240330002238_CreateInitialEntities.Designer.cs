// <auto-generated />
using System;
using MERRICK.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MERRICK.Database.Migrations
{
    [DbContext(typeof(MerrickContext))]
    [Migration("20240330002238_CreateInitialEntities")]
    partial class CreateInitialEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MERRICK.Database.Entities.Core.Account", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AscensionLevel")
                        .HasColumnType("int");

                    b.Property<string>("AutoConnectChatChannels")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ClanID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClanTier")
                        .HasColumnType("int");

                    b.Property<string>("IPAddressCollection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("MACAddressCollection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("SelectedStoreItems")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemInformationCollection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemInformationHashCollection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimestampCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimestampJoinedClan")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimestampLastActive")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ClanID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000001"),
                            AscensionLevel = 666,
                            AutoConnectChatChannels = "[\"KONGOR\",\"TERMINAL\"]",
                            ClanID = new Guid("00000000-0000-0000-0000-000000000004"),
                            ClanTier = 3,
                            IPAddressCollection = "[]",
                            IsMain = true,
                            MACAddressCollection = "[]",
                            Name = "KONGOR",
                            SelectedStoreItems = "[\"ai.custom_icon:1\",\"av.Flamboyant\",\"c.cat_courier\",\"cc.frostburnlogo\",\"cr.Punk Creep\",\"cs.frostburnlogo\",\"m.Super-Taunt\",\"sc.paragon_circle_upgrade\",\"t.Dumpster_Taunt\",\"te.Punk TP\",\"w.8bit_ward\"]",
                            SystemInformationCollection = "[]",
                            SystemInformationHashCollection = "[]",
                            TimestampCreated = new DateTime(2024, 3, 30, 0, 22, 38, 336, DateTimeKind.Utc).AddTicks(7414),
                            TimestampJoinedClan = new DateTime(2024, 3, 30, 0, 22, 38, 336, DateTimeKind.Utc).AddTicks(7409),
                            TimestampLastActive = new DateTime(2024, 3, 30, 0, 22, 38, 336, DateTimeKind.Utc).AddTicks(7415),
                            Type = 5,
                            UserID = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000002"),
                            AscensionLevel = 666,
                            AutoConnectChatChannels = "[\"KONGOR\",\"TERMINAL\"]",
                            ClanID = new Guid("00000000-0000-0000-0000-000000000001"),
                            ClanTier = 3,
                            IPAddressCollection = "[]",
                            IsMain = false,
                            MACAddressCollection = "[]",
                            Name = "ONGOR",
                            SelectedStoreItems = "[\"ai.custom_icon:1\",\"av.Flamboyant\",\"c.cat_courier\",\"cc.frostburnlogo\",\"cr.Punk Creep\",\"cs.frostburnlogo\",\"m.Super-Taunt\",\"sc.paragon_circle_upgrade\",\"t.Dumpster_Taunt\",\"te.Punk TP\",\"w.8bit_ward\"]",
                            SystemInformationCollection = "[]",
                            SystemInformationHashCollection = "[]",
                            TimestampCreated = new DateTime(2024, 3, 30, 0, 22, 38, 336, DateTimeKind.Utc).AddTicks(7423),
                            TimestampJoinedClan = new DateTime(2024, 3, 30, 0, 22, 38, 336, DateTimeKind.Utc).AddTicks(7421),
                            TimestampLastActive = new DateTime(2024, 3, 30, 0, 22, 38, 336, DateTimeKind.Utc).AddTicks(7423),
                            Type = 5,
                            UserID = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000003"),
                            AscensionLevel = 666,
                            AutoConnectChatChannels = "[\"KONGOR\",\"TERMINAL\"]",
                            ClanID = new Guid("00000000-0000-0000-0000-000000000001"),
                            ClanTier = 2,
                            IPAddressCollection = "[]",
                            IsMain = false,
                            MACAddressCollection = "[]",
                            Name = "GOPO",
                            SelectedStoreItems = "[\"ai.custom_icon:1\",\"av.Flamboyant\",\"c.cat_courier\",\"cc.frostburnlogo\",\"cr.Punk Creep\",\"cs.frostburnlogo\",\"m.Super-Taunt\",\"sc.paragon_circle_upgrade\",\"t.Dumpster_Taunt\",\"te.Punk TP\",\"w.8bit_ward\"]",
                            SystemInformationCollection = "[]",
                            SystemInformationHashCollection = "[]",
                            TimestampCreated = new DateTime(2024, 3, 30, 0, 22, 38, 336, DateTimeKind.Utc).AddTicks(7428),
                            TimestampJoinedClan = new DateTime(2024, 3, 30, 0, 22, 38, 336, DateTimeKind.Utc).AddTicks(7426),
                            TimestampLastActive = new DateTime(2024, 3, 30, 0, 22, 38, 336, DateTimeKind.Utc).AddTicks(7428),
                            Type = 5,
                            UserID = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000004"),
                            AscensionLevel = 666,
                            AutoConnectChatChannels = "[\"KONGOR\",\"TERMINAL\"]",
                            ClanID = new Guid("00000000-0000-0000-0000-000000000001"),
                            ClanTier = 2,
                            IPAddressCollection = "[]",
                            IsMain = false,
                            MACAddressCollection = "[]",
                            Name = "Xen0byte",
                            SelectedStoreItems = "[\"ai.custom_icon:1\",\"av.Flamboyant\",\"c.cat_courier\",\"cc.frostburnlogo\",\"cr.Punk Creep\",\"cs.frostburnlogo\",\"m.Super-Taunt\",\"sc.paragon_circle_upgrade\",\"t.Dumpster_Taunt\",\"te.Punk TP\",\"w.8bit_ward\"]",
                            SystemInformationCollection = "[]",
                            SystemInformationHashCollection = "[]",
                            TimestampCreated = new DateTime(2024, 3, 30, 0, 22, 38, 336, DateTimeKind.Utc).AddTicks(7432),
                            TimestampJoinedClan = new DateTime(2024, 3, 30, 0, 22, 38, 336, DateTimeKind.Utc).AddTicks(7431),
                            TimestampLastActive = new DateTime(2024, 3, 30, 0, 22, 38, 336, DateTimeKind.Utc).AddTicks(7432),
                            Type = 5,
                            UserID = new Guid("00000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Core.Clan", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<DateTime>("TimestampCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("Name", "Tag")
                        .IsUnique();

                    b.ToTable("Clans");

                    b.HasData(
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "KONGOR",
                            Tag = "K",
                            TimestampCreated = new DateTime(2024, 3, 30, 0, 22, 38, 336, DateTimeKind.Utc).AddTicks(7337)
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Project KONGOR",
                            Tag = "PK",
                            TimestampCreated = new DateTime(2024, 3, 30, 0, 22, 38, 336, DateTimeKind.Utc).AddTicks(7342)
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Project KONGOR Open-Source",
                            Tag = "PKOS",
                            TimestampCreated = new DateTime(2024, 3, 30, 0, 22, 38, 336, DateTimeKind.Utc).AddTicks(7371)
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Project KONGOR Developers",
                            Tag = "DEV",
                            TimestampCreated = new DateTime(2024, 3, 30, 0, 22, 38, 336, DateTimeKind.Utc).AddTicks(7373)
                        });
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Core.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("GoldCoins")
                        .HasColumnType("int");

                    b.Property<string>("OwnedStoreItems")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PBKDF2PasswordHash")
                        .IsRequired()
                        .HasMaxLength(84)
                        .HasColumnType("nvarchar(84)");

                    b.Property<int>("PlinkoTickets")
                        .HasColumnType("int");

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SRPPasswordHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("SRPPasswordSalt")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("SilverCoins")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimestampCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimestampLastActive")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalExperience")
                        .HasColumnType("int");

                    b.Property<int>("TotalLevel")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-000000000001"),
                            EmailAddress = "project.kongor@proton.me",
                            GoldCoins = 5555555,
                            OwnedStoreItems = "[\"ai.custom_icon:1\",\"av.Flamboyant\",\"c.cat_courier\",\"cc.frostburnlogo\",\"cr.Punk Creep\",\"cs.frostburnlogo\",\"m.Super-Taunt\",\"sc.paragon_circle_upgrade\",\"t.Dumpster_Taunt\",\"te.Punk TP\",\"w.8bit_ward\"]",
                            PBKDF2PasswordHash = "AQAAAAIAAYagAAAAEMUkpLAr01NjkKRPaXCyTa17nlOdPKJucn5QYur+wQBTDKCpgsAcREenK+pGJPBCRw==",
                            PlinkoTickets = 5555555,
                            RoleID = new Guid("00000000-0000-0000-0000-0000f4a5e3d3"),
                            SRPPasswordHash = "fe6f16b0ecb80f6b2bc95d68420fd13afef0c895172a81819870660208ac221a",
                            SRPPasswordSalt = "861c37ec6d049d92cc1c67d195b414f26b572a56358272af3e9c06fcd9bfa053",
                            SilverCoins = 555555555,
                            TimestampCreated = new DateTime(2024, 3, 30, 0, 22, 38, 336, DateTimeKind.Utc).AddTicks(7318),
                            TimestampLastActive = new DateTime(2024, 3, 30, 0, 22, 38, 336, DateTimeKind.Utc).AddTicks(7319),
                            TotalExperience = 22211666,
                            TotalLevel = 666
                        });
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Utility.Role", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-0000f4a5e3d3"),
                            Name = "ADMINISTRATOR"
                        },
                        new
                        {
                            ID = new Guid("00000000-0000-0000-0000-00002b88dfe2"),
                            Name = "USER"
                        });
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Utility.Token", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Purpose")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimestampConsumed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimestampCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Core.Account", b =>
                {
                    b.HasOne("MERRICK.Database.Entities.Core.Clan", "Clan")
                        .WithMany("Members")
                        .HasForeignKey("ClanID");

                    b.HasOne("MERRICK.Database.Entities.Core.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("MERRICK.Database.Entities.Relational.BannedPeer", "BannedPeers", b1 =>
                        {
                            b1.Property<Guid>("AccountID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("BanReason")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<Guid>("GUID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.HasKey("AccountID", "Id");

                            b1.HasIndex("Name")
                                .IsUnique();

                            b1.ToTable("Accounts");

                            b1.ToJson("BannedPeers");

                            b1.WithOwner()
                                .HasForeignKey("AccountID");
                        });

                    b.OwnsMany("MERRICK.Database.Entities.Relational.FriendedPeer", "FriendedPeers", b1 =>
                        {
                            b1.Property<Guid>("AccountID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("ClanTag")
                                .HasMaxLength(4)
                                .HasColumnType("nvarchar(4)");

                            b1.Property<string>("FriendGroup")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<Guid>("GUID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.HasKey("AccountID", "Id");

                            b1.HasIndex("Name")
                                .IsUnique();

                            b1.ToTable("Accounts");

                            b1.ToJson("FriendedPeers");

                            b1.WithOwner()
                                .HasForeignKey("AccountID");
                        });

                    b.OwnsMany("MERRICK.Database.Entities.Relational.IgnoredPeer", "IgnoredPeers", b1 =>
                        {
                            b1.Property<Guid>("AccountID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<Guid>("GUID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.HasKey("AccountID", "Id");

                            b1.HasIndex("Name")
                                .IsUnique();

                            b1.ToTable("Accounts");

                            b1.ToJson("IgnoredPeers");

                            b1.WithOwner()
                                .HasForeignKey("AccountID");
                        });

                    b.Navigation("BannedPeers");

                    b.Navigation("Clan");

                    b.Navigation("FriendedPeers");

                    b.Navigation("IgnoredPeers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Core.User", b =>
                {
                    b.HasOne("MERRICK.Database.Entities.Utility.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Core.Clan", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("MERRICK.Database.Entities.Core.User", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
